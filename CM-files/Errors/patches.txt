    public final EntityPlayer entityPlayer;
    
    public Result interact = DEFAULT;

    public ContainerInteractEvent(Container container, EntityPlayer entityplayer)
    {
        super(container);
        this.entityPlayer = entityplayer;
    }
    
    public boolean canInteractWith() {
        return interact == ALLOW;
    }
    
    @Override
    public void setCanceled(boolean cancel)
    {
        super.setCanceled(cancel);
        interact = (cancel ? DENY : interact == DENY ? DEFAULT : interact);
    }

------

    public static boolean canInteractWith(EntityPlayer entityPlayer, Container openContainer)
    {
        ContainerInteractEvent event = new ContainerInteractEvent(openContainer, entityPlayer);
        return MinecraftForge.EVENT_BUS.post(event) ? false : event.canInteractWith() ? true : openContainer.canInteractWith(entityPlayer); 
    }

***** ENTITYPLAYER *****

        if (!this.worldObj.isRemote && this.openContainer != null)
        {
            ContainerInteractEvent event = new ContainerInteractEvent(this.openContainer, this);
            MinecraftForge.EVENT_BUS.post(event);
            boolean canInteractWithContainer = false;
            if (event.isCanceled() || event.getResult() == Event.Result.DENY)
            {
                canInteractWithContainer = false;
            }
            else if (event.getResult() == Event.Result.DEFAULT)
            {
                canInteractWithContainer = this.openContainer.canInteractWith(this);
            }
            else
            {
                canInteractWithContainer = true;
            }
            if (!canInteractWithContainer)
            {
                this.closeScreen();
                this.openContainer = this.inventoryContainer;
            }


***** CONAINTERBREWINGSTAND *****

    /**
     * Returns the Tile Entity behind this brewing stand inventory / container
     */
    public TileEntityBrewingStand getBrewingStand()
    {
        return this.tileBrewingStand;
    }

***** CONTAINERDISPENSER *****

    /**
     * Returns the Tile Entity behind this dispenser inventory / container
     */
    public TileEntityDispenser getDispenser()
    {
        return this.tileEntityDispenser;
    }

***** CONTAINERFURNACE *****

    /**
     * Returns the Tile Entity behind this furnace inventory / container
     */
    public TileEntityFurnace getFurnace()
    {
        return this.furnace;
    }

***** CONTAINERWORKBENCH *****

    /**
     * Returns the world in which the workbench resides
     */
    public World getWorldObj()
    {
        return this.worldObj;
    }

    public int getPosX()
    {
        return this.posX;
    }

    public int getPosY()
    {
        return this.posY;
    }

    public int getPosZ()
    {
        return this.posZ;
    }